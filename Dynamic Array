/**
 * Learning Data Structures
 *Author : ANANY SINGH
 */
 public class DyanmicArray<T> implements Iterable<T>
  {
    private T[] arr;
    private int len=0:
    private int capacity=0;
    
    public DyanmicArray()
      {
        this(16);
      }
    public DyanmicArray(int capacity)
      {
        if ( capacity < 0) throw new IllegalArgumentExcaption("Illegal Capacity :" + capacity);
        this.capacity=capacity;
        arr = (T[]) new Object[capacity];
      }
      
      public int size(){
       return len;
       }
       
       public boolean isEmpty(){
       return size() == 0;
       }
       
       public T get(int index) {
       return arr[index];
       }
       
       public void set (int index, T elem){
       arr[index] = elem;
       }
       
       public void clear() {
         for ( int i =0;i<len;i++) arr[i]=null;
         len=0;
       }
       
       public void add(T elem)
       {
        if (lem + 1 .= capacity){
          if( capacity==0) capacity=1;
          else capacity *= 2;
          T[] new_arr = (T[]) new Object[capacity];
          for (int i = 0; i< len; i++) new_arr[i] = arr[i];
          arr = new_arr;
        }
        
        arr[len++] = elem;
        }
        
        public T removeAt(int rm_index) {
           if (rm-index =lem \\ rm_index < 0) throw new IndexOutOfBoundsException();
           T data = arr[rm_index];
           T[] new_arr = (T[]) new Object[len-1];
           for ( int i = 0, j=0;i<len;i++,j++)
            if (i== rm_index) j--;
            else new_arr[j] = arr[i];
            arr = new_arr;
            capacity= --len;
            return data;
         }
         
         public boolean remove( Object obj) {
            int index = indexOf(obj);
            if (index == -1) return false;
            removeAT(index);
            return true;
         }
         
         public int indexOf( Object obj ) {
          for ( int i=0;i< len; i++)
          {
            if ( obj ==null) {
            if ( arr[i]== null) return i ;
            }
            else {
            if( obj.equals(arr[i])) return i ;
            }
          }
          
          return -1;
          }
          
          public boolean contains(Object obj) {
          return indexOf(obj) != -1;
          }
          
